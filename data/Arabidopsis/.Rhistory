if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq)
library(DESeq2)
library(readr)
GSE131157_SynCom_mRNA_counts_Tripartite <- read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(GSE131157_SynCom_mRNA_counts_Tripartite)
mRNAcounts <- read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(dplyr)
mRNAcounts[-1,]
mRNAcounts <- mRNAcounts[-1,]
mRNAcounts$X1
View(mRNAcounts$X1)
write.csv(mRNAcounts$X1,file = '~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/gene_names.csv')
mRNAcounts
colnames(mRNAcounts)
rownames(mRNAcounts)
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
mRNAcounts
rownames(mRNAcounts)
mRNAcounts <- read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts
head(mRNAcounts)
mRNAcounts <- mRNAcounts[,-1]
mRNAcounts[,1:8]
#focus on 2 exp
df.f <- mRNAcounts[,1:8]
mRNAcounts
colnames(mRNAcounts)
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"CL28", "CL28","CL28", "CL28", "CL28")))
colData
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
df.f
class(df.f)
#focus on 2 exp
df.f <- data.matrix(mRNAcounts[,1:8])
df.f[1,]
mRNAcounts[1,1:8]
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
(mRNAcounts[1,1:8]
)
data.matrix(mRNAcounts[1,1:8])
mRNAcounts <- read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
mRNAcounts <- mRNAcounts[-1,]
gene.names <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
head(mRNAcounts)
data.matrix(mRNAcounts[,1:8])
mRNAcounts[,1:8]
mRNAcounts[1,1]
mRNAcounts[1,1]+1
as.numeric(mRNAcounts[1,1])+1
df.f %>% mutate_if(is.character,as.numeric)
#focus on 2 exp
df.f <- data.frame(mRNAcounts[,1:8])
df.f %>% mutate_if(is.character,as.numeric)
df.f <- df.f %>% mutate_if(is.character,as.numeric)
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"CL28", "CL28","CL28", "CL28", "CL28")))
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
dds
df.f
mRNAcounts <- read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
#focus on 2 exp
df.f <- mRNAcounts[,1:8]
df.f <- df.f %>% mutate_if(is.character,as.numeric)
df.f[1,1]
df.f[1,1]+1
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"CL28", "CL28","CL28", "CL28", "CL28")))
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
dds
dds <- DESeq(dds)
plotMA(dds)
# get differentially expressed genes
res <- results(dds)
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
df.f
mRNAcounts
mRNAcounts <- mRNAcounts[-1,]
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
mRNAcounts
df.f %>% mutate_if(is.character,as.numeric)
rownames(mRNAcounts)
df.f <- df.f %>% mutate_if(is.character,as.numeric)
rownames(df.f) <- rownames(mRNAcounts)
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"CL28", "CL28","CL28", "CL28", "CL28")))
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
dds
# run DEseq
dds <- DESeq(dds)
plotMA(dds)
# get differentially expressed genes
res <- results(dds)
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
View(mRNAcounts)
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
View(mRNAcounts)
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
head(sig)
setwd("~/Google Drive/Microbiome/FISSEQ/data")
setwd("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis")
gene_descriptions <- read.delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/gene_descriptions.txt")
View(gene_descriptions)
gene_descriptions$Gene.Model.Type
View(gene_descriptions)
res
rownames(res)
gene_descriptions
gene_descriptions$Locus.Identifier
gene_descriptions$Gene.Model.Description
sapply(rownames(res), function(x) gene_descriptions$Gene.Model.Description[which(gene_descriptions$Locus.Identifier == x)])
res$description <- sapply(rownames(res), function(x) gene_descriptions$Gene.Model.Description[which(gene_descriptions$Locus.Identifier == x)])
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
head(sig)
head(sig,50)
View(sig)
sig
View(data.frame(sig))
write.csv(data.frame(sig),file = 'DEG_NBvsCL28.csv')
BiocManager::install("org.At.tair.db")
library(org.At.tair.db)
genemap <- select(org.At.tair.db, selected, "ENTREZID", "SYMBOL")
genemap
selected <- rownames(sig)
universe <- rownames(resOrdered)
universe
#GO term
selected <- rownames(sig)
universe <- rownames(resOrdered)
library(org.At.tair.db)
genemap <- select(org.At.tair.db, selected, "ENTREZID", "SYMBOL")
genemap
org.At.tair.db
org.At.tair.db@.xData
org.At.tair.db
selected
org.At.tair.db
org.At.tair.db::org.At.tairENTREZID
genemap <- select(org.At.tair.db::org.At.tairENTREZID, selected, "ENTREZID", "SYMBOL")
org.At.tair.db::org.At.tairENTREZID
org.At.tair.db::org.At.tairENTREZID@Lkeys
org.At.tair.db
genemap <- select(org.At.tair.db::org.At.tair(), selected, "ENTREZID", "SYMBOL")
genemap
select(org.At.tair.db::org.At.tair(), selected, "ENTREZID", "SYMBOL")
org.At.tair.db::org.At.tair()
x <- org.At.tair.db::org.At.tair()
x
org.At.tair.db::org.At.tairENZYME
x <- org.At.tairGO
# Get the TAIR gene identifiers that are mapped to a GO ID
mapped_genes <- mappedkeys(x)
mapped_genes
# Convert to a list
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Try the first one
got <- xx[[1]]
got[[1]][["GOID"]]
got[[1]][["Ontology"]]
got[[1]][["Evidence"]]
}
xx
x
got
dim(got)
got[1]
# top of ordered matrix
head(resOrdered)
sig
View(sig)
df.f <- mRNAcounts[,c(1:3)]
mRNAcounts[,c(1:3)]
colnames(mRNAcounts)
mRNAcounts <- data.frame(read_delim("~/Google Drive/Microbiome/FISSEQ/data/Arabidopsis/GSE131157_SynCom_mRNA_counts_Tripartite.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
mRNAcounts <- mRNAcounts[-1,]
rownames(mRNAcounts) <- mRNAcounts$X1
mRNAcounts <- mRNAcounts[,-1]
colnames(mRNAcounts)
colnames(mRNAcounts)[9:13]
colnames(mRNAcounts)[8:13]
colnames(mRNAcounts)[8:14]
c(1:3,9:13)
#focus on 2 exp
df.f <- mRNAcounts[,c(1:3,9:13)]
df.f <- df.f %>% mutate_if(is.character,as.numeric)
rownames(df.f) <- rownames(mRNAcounts)
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"CL14", "CL14","CL14", "CL14", "CL14")))
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
# run DEseq
dds <- DESeq(dds)
plotMA(dds)
# get differentially expressed genes
res <- results(dds)
res$description <- sapply(rownames(res), function(x) gene_descriptions$Gene.Model.Description[which(gene_descriptions$Locus.Identifier == x)])
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
sig
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
write.csv(data.frame(sig),file = 'DEG_NBvsCL14.csv')
colnames(mRNAcounts)
colnames(mRNAcounts)[14:20]
colnames(mRNAcounts)[14:19]
colnames(mRNAcounts)[14:118]
colnames(mRNAcounts)[14:18]
#focus on 2 exp
df.f <- mRNAcounts[,c(1:3,14:18)]
df.f <- df.f %>% mutate_if(is.character,as.numeric)
rownames(df.f) <- rownames(mRNAcounts)
colData <- DataFrame(condition=factor(c("ctrl","ctrl","ctrl",
"both", "both","both", "both", "both")))
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
# run DEseq
dds <- DESeq(dds)
plotMA(dds)
# get differentially expressed genes
res <- results(dds)
res$description <- sapply(rownames(res), function(x) gene_descriptions$Gene.Model.Description[which(gene_descriptions$Locus.Identifier == x)])
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
write.csv(data.frame(sig),file = 'DEG_NBvsboth.csv')
colnames(mRNAcounts)
colnames(mRNAcounts)[4:9]
colnames(mRNAcounts)[4:8]
colnames(mRNAcounts)[c(4:8,14:18)]
length(colnames(mRNAcounts)[c(4:8,14:18)])
#focus on 2 exp
df.f <- mRNAcounts[,c(4:8,14:18)]
df.f <- df.f %>% mutate_if(is.character,as.numeric)
rownames(df.f) <- rownames(mRNAcounts)
colData <- DataFrame(condition=factor(c("CL28","CL28","CL28","CL28","CL28",
"both", "both","both", "both", "both")))
colData
# create DESeq input matrix
dds <- DESeqDataSetFromMatrix(df.f, colData,
formula(~ condition))
dds
# run DEseq
dds <- DESeq(dds)
plotMA(dds)
# get differentially expressed genes
res <- results(dds)
res$description <- sapply(rownames(res), function(x) gene_descriptions$Gene.Model.Description[which(gene_descriptions$Locus.Identifier == x)])
# order by BH adjusted p-value
resOrdered <- res[order(res$padj),]
# top of ordered matrix
head(resOrdered)
# get differentially expressed gene matrix
sig <- resOrdered[!is.na(resOrdered$padj) &
resOrdered$padj<0.10 &
abs(resOrdered$log2FoldChange)>=1,]
write.csv(data.frame(sig),file = 'DEG_CL28vsboth.csv')
sig
View(mRNAcounts)
mRNAcounts["AT4G37390",]
mRNAcounts["AT5G57540",]
library(readxl)
VennCommon <- read_excel("VennCommon.xlsx",
col_names = FALSE)
View(VennCommon)
sig
sig[VennCommon$...1,]
View(sig[VennCommon$...1,])
write.csv(data.frame(sig[VennCommon$...1,]),file = 'DEG_CL28vsboth_filtered.csv')
mRNAcounts["AT4G37390",]
plot(mRNAcounts["AT4G37390",])
plot(as.numeric(mRNAcounts["AT4G37390",]))
plot(log(as.numeric(mRNAcounts["AT4G37390",])))
plot(as.numeric(mRNAcounts["AT4G37390",]))
(as.numeric(mRNAcounts["AT4G37390",]))
plot(as.numeric(mRNAcounts["AT1G08090",]))
(as.numeric(mRNAcounts["AT1G08090",]))
View(data.frame(sig))
(as.numeric(mRNAcounts["AT3G44990",]))
plot(as.numeric(mRNAcounts["AT3G44990",]))
sig
library(pheatmap)
mRNAcounts
pheatmap(mRNAcounts[rownames(sig)],)
rownames(sig)
pheatmap(mRNAcounts[rownames(sig),])
mRNAcounts[rownames(sig),]
mRNAcounts
dfx <- mRNAcounts[rownames(sig),]
dfx %>% mutate_if(is.character,as.numeric)
dfx <- dfx %>% mutate_if(is.character,as.numeric)
pheatmap(dfx)
library(RColorBrewer)
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
dfx
rownames(dfx) <- rownames(mRNAcounts)
colnames(dfx)
colnames(dfx) <- c('NB','NB','NB','C28','C28','C28','C28','C28',
'C14','C14','C14','C14','C14',
'both','both''both''both''both')
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
colnames(dfx) <- c('NB','NB','NB','C28','C28','C28','C28','C28',
'C14','C14','C14','C14','C14',
'both','both','both','both','both')
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
rownames(dfx)
rownames(mRNAcounts)
rownames(dfx) <- rownames(mRNAcounts)
colnames(dfx) <- c('NB','NB','NB','C28','C28','C28','C28','C28',
'C14','C14','C14','C14','C14',
'both','both','both','both','both')
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
dfx
rownames(dfx)
rownames(dfx) <- rownames(mRNAcounts)
rownames(dfx)
rownames(mRNAcounts)
dfx <- mRNAcounts[rownames(sig),]
dfx
gene.names <- rownames(mRNAcounts)
dfx <- dfx %>% mutate_if(is.character,as.numeric)
rownames(dfx) <- gene.names
colnames(dfx) <- c('NB','NB','NB','C28','C28','C28','C28','C28',
'C14','C14','C14','C14','C14',
'both','both','both','both','both')
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
dfx <- mRNAcounts[rownames(sig),]
gene.names <- rownames(mRNAcounts)
gene.names
dfx <- dfx %>% mutate_if(is.character,as.numeric)
rownames(dfx) <- gene.names
rownames(dfx)
gene.names
dfx <- mRNAcounts[rownames(sig),]
gene.names <- rownames(dfx)
dfx <- dfx %>% mutate_if(is.character,as.numeric)
rownames(dfx) <- gene.names
colnames(dfx) <- c('NB','NB','NB','C28','C28','C28','C28','C28',
'C14','C14','C14','C14','C14',
'both','both','both','both','both')
dfx
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'))
pheatmap(dfx,
color = brewer.pal(n = 9,name = 'Reds'),
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'RdBu')),
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'RdBu')),border_color = 'white',
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'PlYg')),border_color = 'white',
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'PiYG')),border_color = 'white',
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'PuOr')),border_color = 'white',
scale = 'row')
pheatmap(dfx,
color = rev(brewer.pal(n = 9,name = 'PuOr')),border_color = 'white',
fontsize_row = 3,
scale = 'row')
colSums(mRNAcounts)
#focus on 2 exp
df.f           <- mRNAcounts#[,c(4:8,14:18)]
df.f           <- df.f %>% mutate_if(is.character,as.numeric)
colSums(df.f)
plot(colSums(df.f))
write.csv(colSums(df.f),file = 'rawcounts.csv')
mRNAcounts['AT1G08090',]
plot(mRNAcounts['AT1G08090',])
plot(as.numeric(mRNAcounts['AT1G08090',]))
plot(as.numeric(mRNAcounts['AT5G38820',]))
plot(as.numeric(mRNAcounts['AT5G48010',]))
plot(as.numeric(mRNAcounts['AT5G38820',]))
